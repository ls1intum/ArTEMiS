entity Course (course) {
  title String,
  studentGroupName String,
  teachingAssistantGroupName String
}

entity Exercise (exercise) {        //abstract
  title String,
  releaseDate ZonedDateTime,
  dueDate ZonedDateTime
}

entity ProgrammingExercise {        //extends Exercise
  baseRepositoryUrl String,
  baseBuildPlanId String,
  publishBuildPlanUrl Boolean,
  allowOnlineEditor Boolean
}

entity ModelingExercise {           //extends Exercise
	baseFilePath String
}


entity QuizExercise {               //extends Exercise
    description String,
    explanation String,
    randomizeQuestionOrder Boolean,
    allowedNumberOfAttempts Integer,
	isVisibleBeforeStart Boolean,
    isOpenForPractice Boolean,
    isPlannedToStart Boolean,
    duration Integer
}

entity LtiOutcomeUrl (lti_outcome_url) {
  url String,
  sourcedId String
}

entity SubmittedAnswer {            //abstract

}

entity Question {                   //abstract
	title String
    text String
    hint String
    explanation String
    score Integer
    scoringType ScoringType
    randomizeOrder Boolean
}

enum ScoringType {
	ALL_OR_NOTHING,
    PROPORTIONAL_CORRECT_OPTIONS,
    TRUE_FALSE_NEUTRAL
}

entity MultipleChoiceQuestion {             //extends Question

}

entity AnswerOption {
	text String
    hint String
    explanation String
    isCorrect Boolean
}

entity MultipleChoiceSubmittedAnswer {      //extends SubmittedAnswer

}

entity DragAndDropQuestion {          //extends Question
	backgroundFilePath String
}

entity DropLocation {
	posX Integer
    posY Integer
    width Integer
    height Integer
}

entity DragItem {
	pictureFilePath String
    text String
    correctScore Integer
    incorrectScore Integer
}

entity Participation (participation) {
  repositoryUrl String,
  buildPlanId String,
  initializationState ParticipationState,
  initializationDate ZonedDateTime
}

entity LtiUserId (lti_user_id) {
  ltiUserId String
}

entity Result (result) {
  resultString String,
  completionDate ZonedDateTime,
  successful Boolean,
  buildArtifact Boolean,
  score Long
}

entity Feedback(feedback) {
	text String,
	detailText String,
	type FeedbackType
}

enum FeedbackType {
    AUTOMATIC,
    MANUAL
}

enum ParticipationState {
   UNINITIALIZED,
   REPO_COPIED,
   REPO_CONFIGURED,
   BUILD_PLAN_COPIED,
   BUILD_PLAN_CONFIGURED,
   INITIALIZED
}

enum SubmissionType {
	MANUAL,
    TIMEOUT
}

entity Submission {  //abstract
	submitted Boolean
    type SubmissionType
}

entity ModelingSubmission {         //extends Submission
	submissionPath String
}

entity QuizSubmission {             //extends Submission
}


entity DragAndDropSubmittedAnswer {      //extends SubmittedAnswer

}

entity DragAndDropAssignment {

}

relationship OneToMany {
  Course{exercises} to Exercise{course(title)},
  Exercise{participations} to Participation{exercise(title)},
  Participation{results} to Result{participation},
  Result{feedbacks} to Feedback{result},
  QuizExercise{questions} to Question{exercise},
  MultipleChoiceQuestion{answerOptions} to AnswerOption{question},
  DragAndDropQuestion{dropLocations} to DropLocation{question},
  DragAndDropQuestion{dragItems} to DragItem{question},
  QuizSubmission{submittedAnswers} to SubmittedAnswer{submission},
  DragAndDropSubmittedAnswer{assignments} to DragAndDropAssignment{submittedAnswer}
}

relationship OneToOne {
    Result{submission} to Submission,
    DragItem{correctLocation} to DropLocation,
    LtiUserId{user} to User
}

relationship ManyToOne {
  Participation{student(login)} to User,
  LtiOutcomeUrl{user} to User,
  LtiOutcomeUrl{exercise} to Exercise,
  SubmittedAnswer{question} to Question
  DragAndDropAssignment{item} to DragItem,
  DragAndDropAssignment{location} to DropLocation
}

relationship ManyToMany {
	MultipleChoiceSubmittedAnswer{selectedOptions} to AnswerOption
}

paginate Exercise with infinite-scroll

service Course with serviceClass
service Participation with serviceClass
