entity Statistic (statistic) {      //abstract
    released Boolean,
    participantsRated Integer,
    participantsUnrated Integer
}

entity QuizPointStatistic (quizPointStatistic){ //extends Statistic
}

entity QuestionStatistic (questionStatistic){   //extends Statistic, abstract
    ratedCorrectCounter Integer,
    unRatedCorrectCounter Integer,
}

entity MultipleChoiceQuestionStatistic (multipleChoiceQuestionStatistic){   //extends QuestionStatistic
}

entity DragAndDropQuestionStatistic (dragAndDropQuestionStatistic){   //extends QuestionStatistic
}

entity StatisticCounter(statisticCounter){ //abstract
    ratedCounter Integer,
    UnRatedCounter Integer
}

entity PointCounter(pointCounter){         //extends PointCounter
    points Double
}

entity AnswerCounter(answerCounter){       //extends StatisticCounter
}

entity DropLocationCounter(dropLocationCounter){    //extends StatisticCounter
}

entity Course (course) {
    title String,
    studentGroupName String,
    teachingAssistantGroupName String,
    instructorGroupName String,
    startDate ZonedDateTime,
    endDate ZonedDateTime,
    onlineCourse Boolean
}

entity Exercise (exercise) {        //abstract
    problemStatement String,        //LONGTEXT --> lob
    gradingInstructions String,     //LONGTEXT --> lob
    title String,
    releaseDate ZonedDateTime,
    dueDate ZonedDateTime,
    maxScore Double,
    difficulty DifficultyLevel
    categories String               //List<String>, similar to User --> groups
}

enum DifficultyLevel {
	EASY,
    MEDIUM,
    HARD
}

entity TextExercise {               //extends Exercise
    sampleSolution String           //LONGTEXT --> lob
}

entity FileUploadExercise {         //extends Exercise
    filePattern String
}

entity ProgrammingExercise {        //extends Exercise
    baseRepositoryUrl String,
    solutionRepositoryUrl String,
    baseBuildPlanId String,
    publishBuildPlanUrl Boolean,
    allowOnlineEditor Boolean
}

entity ModelingExercise {           //extends Exercise
    diagramType DiagramType,
    sampleSolutionModel String,      //LONGTEXT --> lob
    sampleSolutionExplanation String //LONGTEXT --> lob
}

enum DiagramType {
	CLASS,
    ACTIVITY,
    USE_CASE,
    COMMUNICATION
}

entity QuizExercise {               //extends Exercise
    description String,
    explanation String,
    randomizeQuestionOrder Boolean,
    allowedNumberOfAttempts Integer,
	isVisibleBeforeStart Boolean,
    isOpenForPractice Boolean,
    isPlannedToStart Boolean,
    duration Integer
}

entity LtiOutcomeUrl (lti_outcome_url) {
    url String,
    sourcedId String
}

entity SubmittedAnswer {            //abstract
    scoreInPoints Double
}

entity Question {                   //abstract
	title String,
    text String,
    hint String,
    explanation String,
    score Integer,
    scoringType ScoringType,
    randomizeOrder Boolean,
    invalid Boolean
}

enum ScoringType {
	ALL_OR_NOTHING,
    PROPORTIONAL_CORRECT_OPTIONS,
    TRUE_FALSE_NEUTRAL
}

entity MultipleChoiceQuestion {             //extends Question

}

entity AnswerOption {
	text String,
    hint String,
    explanation String,
    isCorrect Boolean,
    invalid Boolean
}

entity MultipleChoiceSubmittedAnswer {      //extends SubmittedAnswer

}

entity DragAndDropQuestion {          //extends Question
	backgroundFilePath String
}

entity DropLocation {
	posX Integer
    posY Integer
    width Integer
    height Integer
    invalid Boolean
}

entity DragItem {
	pictureFilePath String
    text String
    invalid Boolean
}

entity Participation (participation) {
    repositoryUrl String,
    buildPlanId String,
    initializationState InitializationState,
    initializationDate ZonedDateTime,
    presentationScore Integer
}

entity LtiUserId (lti_user_id) {
    ltiUserId String
}

entity Result (result) {
    resultString String,
    completionDate ZonedDateTime,
    successful Boolean,
    buildArtifact Boolean,
    score Long,
    rated Boolean,
    hasFeedback Boolean,
    assessmentType AssessmentType
}

enum AssessmentType {
    AUTOMATIC,
    MANUAL,
    SEMIAUTOMATIC
}

entity Feedback(feedback) {
	text String,
	detailText String,
	positive Boolean,
	type FeedbackType
}

enum FeedbackType {
    AUTOMATIC,
    MANUAL
}

enum InitializationState {
    UNINITIALIZED,
    REPO_COPIED,
    REPO_CONFIGURED,
    BUILD_PLAN_COPIED,
    BUILD_PLAN_CONFIGURED,
    INITIALIZED
}

enum SubmissionType {
	MANUAL,
    TIMEOUT
}

entity Submission {                 //abstract
	submitted Boolean
	submissionDate ZonedDateTime,
    type SubmissionType
}

entity ModelingSubmission {         //extends Submission
	model String,                   //transient --> stored in the file system
	explanationText String          //LONGTEXT --> clob
}

entity QuizSubmission {             //extends Submission
    scoreInPoints Double
}

entity ProgrammingSubmission {      //extends Submission
    commitHash String
}

entity TextSubmission {             //extends Submission
    text String                     //LONGTEXT --> clob
}

entity FileUploadSubmission {       //extends Submission
    filePath String
}


entity DragAndDropSubmittedAnswer {      //extends SubmittedAnswer

}

entity DragAndDropMapping {
	dragItemIndex Integer
    dropLocationIndex Integer
    invalid Boolean
}

entity ApollonDiagram {
    title String
    jsonRepresentation String       // LONGTEXT --> clob
}

relationship OneToMany {
    QuizPointStatistic{PointCounters} to PointCounter{quizPointStatistic},
    MultipleChoiceQuestionStatistic{AnswerCounters} to AnswerCounter{MultipleChoiceQuestionStatistic},
    DragAndDropQuestionStatistic{DropLocationCounters} to DropLocationCounter{DragAndDropQuestionStatistic},
    Course{exercises} to Exercise{course(title)},
    Exercise{participations} to Participation{exercise(title)},
    Participation{results} to Result{participation},
    Participation{submissions} to Submission{participation},
    Result{feedbacks} to Feedback{result},
    QuizExercise{questions} to Question{exercise},
    MultipleChoiceQuestion{answerOptions} to AnswerOption{question},
    DragAndDropQuestion{dropLocations} to DropLocation{question},
    DragAndDropQuestion{dragItems} to DragItem{question},
    QuizSubmission{submittedAnswers} to SubmittedAnswer{submission},
    DragAndDropSubmittedAnswer{mappings} to DragAndDropMapping{submittedAnswer},
    DragAndDropQuestion{correctMappings} to DragAndDropMapping{question}
}

relationship OneToOne {
    QuizExercise{quizPointStatistic} to QuizPointStatistic{quiz},
    Question{questionStatistic} to QuestionStatistic{question},
    AnswerCounter{answer} to AnswerOption,
    DropLocationCounter{dropLocation} to DropLocation,
    Submission{result} to Result{submission},
    LtiUserId{user} to User,
    Result{assessor} to User
}

relationship ManyToOne {
    Participation{student(login)} to User,
    LtiOutcomeUrl{user} to User,
    LtiOutcomeUrl{exercise} to Exercise,
    SubmittedAnswer{question} to Question
    DragAndDropMapping{dragItem} to DragItem,
    DragAndDropMapping{dropLocation} to DropLocation
}

relationship ManyToMany {
	MultipleChoiceSubmittedAnswer{selectedOptions} to AnswerOption
}

paginate Exercise with infinite-scroll

service Course with serviceClass
service Participation with serviceClass
