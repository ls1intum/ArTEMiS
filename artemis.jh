entity Statistic (statistic) {      //abstract
    participantsRated Integer,
    participantsUnrated Integer
}

entity QuizPointStatistic (quizPointStatistic) { //extends Statistic
}

entity QuestionStatistic (questionStatistic) {   //extends Statistic, abstract
    ratedCorrectCounter Integer,
    unRatedCorrectCounter Integer,
}

entity MultipleChoiceQuestionStatistic (mcQuestionStatistic) {   //extends QuestionStatistic
}

entity DragAndDropQuestionStatistic (dndQuestionStatistic) {   //extends QuestionStatistic
}

entity ShortAnswerQuestionStatistic (saQuestionStatistic) {   //extends QuestionStatistic
}

entity StatisticCounter(statisticCounter) { //abstract
    ratedCounter Integer,
    UnRatedCounter Integer
}

entity PointCounter(pointCounter) {         //extends PointCounter
    points Double
}

entity AnswerCounter(answerCounter) {       //extends StatisticCounter
}

entity DropLocationCounter(dropLocationCounter) {    //extends StatisticCounter
}

entity ShortAnswerSpotCounter(shortAnswerSpotCounter) {    //extends StatisticCounter
}

entity Course (course) {
    title String,
    description String,        //LONGTEXT --> lob
    shortName String,
    studentGroupName String,
    teachingAssistantGroupName String,
    instructorGroupName String,
    startDate ZonedDateTime,
    endDate ZonedDateTime,
    onlineCourse Boolean,
    maxComplaints Integer
}

entity Exercise (exercise) {        //abstract
    problemStatement String,        //LONGTEXT --> lob
    gradingInstructions String,     //LONGTEXT --> lob
    title String,
    shortName String,
    releaseDate ZonedDateTime,
    dueDate ZonedDateTime,
    assessmentDueDate ZonedDateTime,
    maxScore Double,
    difficulty DifficultyLevel,
    categories String               //List<String>, similar to User --> groups
}

enum DifficultyLevel {
	EASY,
    MEDIUM,
    HARD
}

entity TextExercise {               //extends Exercise
    sampleSolution String           //LONGTEXT --> lob
}

entity FileUploadExercise {         //extends Exercise
    filePattern String
}

entity ProgrammingExercise {        //extends Exercise
    baseRepositoryUrl String,
    solutionRepositoryUrl String,
    baseBuildPlanId String,
    solutionBuildPlanId String,
    publishBuildPlanUrl Boolean,
    allowOnlineEditor Boolean,
    programmingLanguage ProgrammingLanguage,
    packageName String
}

enum ProgrammingLanguage {
    JAVA,
    PYTHON
}

entity ModelingExercise {           //extends Exercise
    diagramType DiagramType,
    sampleSolutionModel String,      //LONGTEXT --> lob
    sampleSolutionExplanation String //LONGTEXT --> lob
}

enum DiagramType {
	CLASS,
    ACTIVITY,
    USE_CASE,
    COMMUNICATION
}

entity QuizExercise {               //extends Exercise
    description String,
    explanation String,
    randomizeQuestionOrder Boolean,
    allowedNumberOfAttempts Integer,
	isVisibleBeforeStart Boolean,
    isOpenForPractice Boolean,
    isPlannedToStart Boolean,
    duration Integer
}

entity LtiOutcomeUrl (lti_outcome_url) {
    url String,
    sourcedId String
}

entity SubmittedAnswer {            //abstract
    scoreInPoints Double
}

entity Question {                   //abstract
	title String,
    text String,
    hint String,
    explanation String,
    score Integer,
    scoringType ScoringType,
    randomizeOrder Boolean,
    invalid Boolean
}

enum ScoringType {
	ALL_OR_NOTHING,
    PROPORTIONAL_CORRECT_OPTIONS,
    TRUE_FALSE_NEUTRAL
}

entity MultipleChoiceQuestion {             //extends Question

}

entity AnswerOption {
	text String,
    hint String,
    explanation String,
    isCorrect Boolean,
    invalid Boolean
}

entity MultipleChoiceSubmittedAnswer (mcSubmittedAnswer) {      //extends SubmittedAnswer

}

entity DragAndDropQuestion {          //extends Question
	backgroundFilePath String
}

entity DropLocation {
	posX Integer
    posY Integer
    width Integer
    height Integer
    invalid Boolean
}

entity DragItem {
	pictureFilePath String
    text String
    invalid Boolean
}

entity ShortAnswerQuestion {          //extends Question

}

entity ShortAnswerSpot {
	width Integer,
	spotNr Integer,
    invalid Boolean,
}

entity ShortAnswerSolution {
    text String
    invalid Boolean
}

entity Participation (participation) {
    repositoryUrl String,
    buildPlanId String,
    initializationState InitializationState,
    initializationDate ZonedDateTime,
    presentationScore Integer
}

entity LtiUserId (lti_user_id) {
    ltiUserId String
}

entity ExerciseResult (result) {
    resultString String,
    completionDate ZonedDateTime,
    successful Boolean,
    buildArtifact Boolean,
    score Long,
    rated Boolean,
    hasFeedback Boolean,
    assessmentType AssessmentType,
    hasComplaint Boolean,
    exampleResult Boolean
}

enum AssessmentType {
    AUTOMATIC,
    MANUAL
}

entity Feedback(feedback) {
	text String,
	detailText String,
	reference String,
	credits Double,
	positive Boolean,
	type FeedbackType
}

enum FeedbackType {
    AUTOMATIC,
    MANUAL
}

enum InitializationState {
    UNINITIALIZED,
    REPO_COPIED,
    REPO_CONFIGURED,
    BUILD_PLAN_COPIED,
    BUILD_PLAN_CONFIGURED,
    INITIALIZED
}

enum SubmissionType {
	MANUAL,
    TIMEOUT,
    TEST,
    OTHER
}

entity Submission {                 //abstract
	submitted Boolean
	submissionDate ZonedDateTime,
    type SubmissionType,
    exampleSubmission Boolean
}

entity ModelingSubmission {         //extends Submission
	model String,                   //transient --> stored in the file system
	explanationText String          //LONGTEXT --> lob
}

entity QuizSubmission {             //extends Submission
    scoreInPoints Double
}

entity ProgrammingSubmission {      //extends Submission
    commitHash String
}

entity TextSubmission {             //extends Submission
    text String                     //LONGTEXT --> lob
}

entity FileUploadSubmission {       //extends Submission
    filePath String
}

entity ExampleSubmission {
    usedForTutorial Boolean
}

entity DragAndDropSubmittedAnswer (dndSubmittedAnswer) {      //extends SubmittedAnswer

}

entity DragAndDropMapping {
	dragItemIndex Integer
    dropLocationIndex Integer
    invalid Boolean
}

entity ShortAnswerSubmittedAnswer (saSubmittedAnswer) {      //extends SubmittedAnswer
}

entity ShortAnswerSubmittedText (shortAnswerSubmittedText) {
    text String,
    isCorrect Boolean
}

entity ShortAnswerMapping {
	shortAnswerSpotIndex Integer
    shortAnswerSolutionIndex Integer
    invalid Boolean
}

entity ApollonDiagram {
    title String
    jsonRepresentation String       // LONGTEXT --> lob
}

entity Complaint {
    complaintText String,
    accepted Boolean,
    submittedTime ZonedDateTime,
    resultBeforeComplaint String    // LONGTEXT --> lob
}

entity ComplaintResponse {
    responseText String
    submittedTime ZonedDateTime
}

entity TutorParticipation {
    status TutorParticipationStatus,
    points Integer
}

enum TutorParticipationStatus {
    NOT_PARTICIPATED,
    REVIEWED_INSTRUCTIONS,
    TRAINED,
    COMPLETED
}

relationship OneToMany {
    QuizPointStatistic{PointCounters} to PointCounter{quizPointStatistic},
    MultipleChoiceQuestionStatistic{AnswerCounters} to AnswerCounter{MultipleChoiceQuestionStatistic},
    DragAndDropQuestionStatistic{DropLocationCounters} to DropLocationCounter{DragAndDropQuestionStatistic},
    ShortAnswerQuestionStatistic{ShortAnswerSpotCounters} to ShortAnswerSpotCounter{ShortAnswerQuestionStatistic},
    Course{exercises} to Exercise{course},
    Exercise{participations} to Participation{exercise},
    Exercise{tutorParticipations} to TutorParticipation{assessedExercise},
    Participation{results} to ExerciseResult{participation},
    Participation{submissions} to Submission{participation},
    ExerciseResult{feedbacks} to Feedback{result},
    QuizExercise{questions} to Question{exercise},
    MultipleChoiceQuestion{answerOptions} to AnswerOption{question},
    DragAndDropQuestion{dropLocations} to DropLocation{question},
    DragAndDropQuestion{dragItems} to DragItem{question},
    ShortAnswerQuestion{spots} to ShortAnswerSpot{question},
    ShortAnswerQuestion{solutions} to ShortAnswerSolution{question},
    QuizSubmission{submittedAnswers} to SubmittedAnswer{submission},
    DragAndDropSubmittedAnswer{mappings} to DragAndDropMapping{submittedAnswer},
    DragAndDropQuestion{correctMappings} to DragAndDropMapping{question},
    ShortAnswerQuestion{correctMappings} to ShortAnswerMapping{question}
    ShortAnswerSubmittedAnswer{submittedTexts} to ShortAnswerSubmittedText{submittedAnswer},
    TutorParticipation{trainedExampleSubmissions} to ExampleSubmission,
    Exercise{exampleSubmissions} to ExampleSubmission{exercise}
}

relationship OneToOne {
    QuizExercise{quizPointStatistic} to QuizPointStatistic{quiz},
    Question{questionStatistic} to QuestionStatistic{question},
    AnswerCounter{answer} to AnswerOption,
    DropLocationCounter{dropLocation} to DropLocation,
    ShortAnswerSpotCounter{spot} to ShortAnswerSpot,
    ShortAnswerSubmittedText{spot} to ShortAnswerSpot,
    Submission{result} to ExerciseResult{submission},
    LtiUserId{user} to User,
    ExerciseResult{assessor} to User,
    Complaint{result} to ExerciseResult,
    ComplaintResponse{complaint} to Complaint,
    Complaint{student} to User,
    ComplaintResponse{reviewer} to User,
    ExampleSubmission{submission} to Submission
}

relationship ManyToOne {
    Participation{student} to User,
    LtiOutcomeUrl{user} to User,
    LtiOutcomeUrl{exercise} to Exercise,
    SubmittedAnswer{question} to Question
    DragAndDropMapping{dragItem} to DragItem,
    DragAndDropMapping{dropLocation} to DropLocation,
    ShortAnswerMapping{solution} to ShortAnswerSolution,
    ShortAnswerMapping{spot} to ShortAnswerSpot,
    TutorParticipation{tutor} to User,
}

relationship ManyToMany {
	MultipleChoiceSubmittedAnswer{selectedOptions} to AnswerOption
}

paginate Exercise with infinite-scroll

service Course with serviceClass
service Participation with serviceClass
