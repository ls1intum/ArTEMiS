name: Testserver Deployment

on: 
  workflow_dispatch:
    inputs:
      host:
        description: 'Testserver'
        required: true
        default: 'artemistest5'
      pr:
        description: 'Pull request ID (e.g. 42)'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Check "lock:${{ github.event.inputs.host }}" label
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const opts = github.issues.listForRepo.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['lock:${{ github.event.inputs.host }}']
          })
          const issues = await github.paginate(opts)
          if (issues.length == 1 && issues[0].number != ${{ github.event.inputs.pr }}) {
            core.setFailed(`Testserver "${{ github.event.inputs.host }}" is already in use by PR #${issues[0].number}.`);
          } else if (issues.length > 1) {
            core.setFailed('Testserver "${{ github.event.inputs.host }}" is already in use by multiple PRs. Check PRs with label "lock:${{ github.event.inputs.host }}"!');
          } else {
            await github.issues.addLabels({
              issue_number: ${{ github.event.inputs.pr }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['lock:${{ github.event.inputs.host }}']
            })
          }

# Downlaod WAR file from latest build in PR
    - name: Download Artemis WAR artifact for PR#"${{ github.event.inputs.pr }}"
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        pr: ${{ github.event.inputs.pr }}
        name: Artemis.war
    - name: Store Artifact Name
      id: artifact-name
      run: echo "::set-output name=war-file::$(ls)"

    - name: Install vpnc
      run: sudo apt-get install vpnc
# Fill config from Secret (https://www.lrz.de/services/netz/mobil/vpnpda/)
    - name: Configure LRZ VPN
      run: |
        echo "${{ secrets.LRZ_VPN_CONFIG }}" > lrz.conf
        sudo mkdir -p /etc/vpnc
        sudo mv lrz.conf /etc/vpnc/
        sudo chmod 600 /etc/vpnc/lrz.conf
    - name: Connect VPN
      run: sudo vpnc lrz
    - name: Ping sophos.lrz.de (only accessible inside MWN)
      id: vpn-test
      run: |
        ping -c 5 sophos.lrz.de
        echo "::set-output name=success::true"

# Configure SSH Key
    - name: Setup SSH Keys and known_hosts
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ github.event.inputs.host }}.ase.in.tum.de >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

# Downlaod artemis-server-cli from GH without cloning the Repo
    - name: Fetch Artemis CLI
      run: |
        wget https://raw.githubusercontent.com/ls1intum/Artemis/develop/artemis-server-cli
        chmod +x artemis-server-cli

    - name: Deploy Artemis WAR artifact
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: ./artemis-server-cli deploy bamboo@${{ github.event.inputs.host }}.ase.in.tum.de -w ./${{steps.artifact-name.outputs.war-file}} -y

# Always disconnect from VPN
    - name: Disconncet VPN
      run: |
        sudo vpnc-disconnect
        sudo rm /etc/vpnc/lrz.conf
      if: ${{ always() && (steps.vpn-test.outputs.success == 'true') }}
