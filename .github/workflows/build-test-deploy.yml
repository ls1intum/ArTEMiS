name: Build, Test, and Deploy

on:
  pull_request:
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build-test-deploy.yml'
  push:
    branches:
    - develop
    - main
    - release/*
    tags: '[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build-test-deploy.yml'
  release:
    types:
    - created

# Keep in sync with codeql-analysis.yml
env:
  CI: true
  node: 14.x
  java: 16

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v2.1.5
      with:
        node-version: '${{ env.node }}'
    - name: Setup Java
      uses: actions/setup-java@v2.1.0
      with:
        distribution: 'zulu'
        java-version: '${{ env.java }}'
    - uses: actions/checkout@v2
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-
    - name: Production Build
      run: ./gradlew -Pprod -Pwar clean bootWar
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Artemis.war
        path: build/libs/Artemis-*.war
    - name: Upload Release Artifact
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/libs/Artemis-${{ github.event.release.tag_name }}.war
        asset_name: Artemis.war
        asset_content_type: application/x-webarchive

  server-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java
      uses: actions/setup-java@v2.1.0
      with:
        distribution: 'zulu'
        java-version: '${{ env.java }}'
    - uses: actions/checkout@v2
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Java Tests
      run: ./gradlew --console=plain executeTests jacocoTestReport -x yarn -x webpack jacocoTestCoverageVerification
    - name: "Codacy: Report coverage"
      uses: codacy/codacy-coverage-reporter-action@master
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: build/reports/jacoco/test/jacocoTestReport.xml
      if: (github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) && (success() || failure()) && github.event.pull_request.user.login != 'dependabot[bot]'
    - name: Annotate Server Test Results
      uses: ashley-taylor/junit-report-annotations-action@9ac2f823854c677f30e062dfe779445e33e5d380
      if: always() && github.event.pull_request.user.login != 'dependabot[bot]'
      with:
        access-token: ${{ secrets.GITHUB_TOKEN }}
        path: build/test-results/test/*.xml
        numFailures: 99

  server-style:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java
      uses: actions/setup-java@v2.1.0
      with:
        distribution: 'zulu'
        java-version: '${{ env.java }}'
    - uses: actions/checkout@v2
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Java Code Style
      run: ./gradlew spotlessCheck
    - name: Java Documentation
      run: ./gradlew checkstyleMain -x yarn -x webpack
      if: success() || failure()

  client-tests-fast:
    runs-on: ubuntu-latest
    steps:
        - name: Setup Node.js
          uses: actions/setup-node@v2.1.5
          with:
              node-version: '${{ env.node }}'
        - uses: actions/checkout@v2
        - name: Cache node modules
          uses: actions/cache@v2
          with:
              path: node_modules
              key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                  ${{ runner.os }}-node_modules-
        - name: Install Dependencies
          run: yarn install
        - name: Fast TypeScript Test without Typechecking
          run: yarn test:ci --ci
        - name: "Codacy: Report coverage"
          uses: codacy/codacy-coverage-reporter-action@master
          with:
              project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
              coverage-reports: coverage/lcov.info
          if: (github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) && (success() || failure()) && github.event.pull_request.user.login != 'dependabot[bot]'
        - name: Annotate Client Test Results
          uses: ashley-taylor/junit-report-annotations-action@9ac2f823854c677f30e062dfe779445e33e5d380
          if: always() && github.event.pull_request.user.login != 'dependabot[bot]'
          with:
              access-token: ${{ secrets.GITHUB_TOKEN }}
              path: junit.xml
              numFailures: 99

  client-tests:
    runs-on: ubuntu-latest
    steps:
        - name: Setup Node.js
          uses: actions/setup-node@v2.1.5
          with:
              node-version: '${{ env.node }}'
        - uses: actions/checkout@v2
        - name: Cache node modules
          uses: actions/cache@v2
          with:
              path: node_modules
              key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                  ${{ runner.os }}-node_modules-
        - name: Install Dependencies
          run: yarn install
        - name: TypeScript Test With Typechecking
          run: yarn test --ci
        - name: Annotate Client Test Results
          uses: ashley-taylor/junit-report-annotations-action@9ac2f823854c677f30e062dfe779445e33e5d380
          if: always() && github.event.pull_request.user.login != 'dependabot[bot]'
          with:
              access-token: ${{ secrets.GITHUB_TOKEN }}
              path: junit.xml
              numFailures: 99

  client-style:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v2.1.5
      with:
        node-version: '${{ env.node }}'
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-
    - name: Install Dependencies
      run: yarn install
    - name: TypeScript Formatting
      run: yarn prettier:check
    - name: TypeScript Code Style
      run: yarn lint
      if: success() || failure()
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: artemistest5
            url: https://artemistest5.ase.in.tum.de
    environment:
      url: ${{ matrix.url }}
      name: ${{ matrix.environment }}
    concurrency: deployment_environment_${{ matrix.environment }}
    steps:
    - name: Check "lock:${{ matrix.environment }}" label
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const opts = github.issues.listForRepo.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['lock:${{ matrix.environment }}']
          })
          const issues = await github.paginate(opts)
          if (issues.length == 1 && github.event.pull_request && issues[0].number != ${{ github.event.pull_request.number }}) {
            core.setFailed(`Testserver "${{ matrix.environment }}" is already in use by PR #${issues[0].number}.`);
          } else if (issues.length > 1) {
            core.setFailed('Testserver "${{ matrix.environment }}" is already in use by multiple PRs. Check PRs with label "lock:${{ matrix.environment }}"!');
          } else if (github.event.pull_request) {
            await github.issues.addLabels({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['lock:${{ matrix.environment }}']
            })
          }

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: Artemis.war
    - name: Store Artifact Name
      id: artifact-name
      run: echo "::set-output name=war-file::$(ls)"

    - name: Install vpnc
      run: sudo apt-get install vpnc
    # Fill config from Secret (https://www.lrz.de/services/netz/mobil/vpnpda/)
    - name: Configure LRZ VPN
      run: |
        echo "${{ secrets.LRZ_VPN_CONFIG }}" > lrz.conf
        sudo mkdir -p /etc/vpnc
        sudo mv lrz.conf /etc/vpnc/
        sudo chmod 600 /etc/vpnc/lrz.conf
    - name: Connect VPN
      run: sudo vpnc lrz
    - name: Ping sophos.lrz.de (only accessible inside MWN)
      id: vpn-test
      run: |
        ping -c 5 sophos.lrz.de
        echo "::set-output name=success::true"

    # Configure SSH Key
    - name: Setup SSH Keys and known_hosts
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p ~/.ssh
          for host in ${{ secrets.DEPLOYMENT_HOSTS }}; do
            ssh-keyscan ${host} >> ~/.ssh/known_hosts
          end
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

    # Downlaod artemis-server-cli from GH without cloning the Repo
    - name: Fetch Artemis CLI
      run: |
        wget https://raw.githubusercontent.com/ls1intum/Artemis/develop/artemis-server-cli
        chmod +x artemis-server-cli

    - name: Deploy Artemis WAR artifact
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        for host in ${{ secrets.DEPLOYMENT_HOSTS }}; do
          ./artemis-server-cli deploy ${{ secrets.DEPLOYMENT_USER }}@${host} -w ./${{steps.artifact-name.outputs.war-file}} -y
        end

    # Always disconnect from VPN
    - name: Disconncet VPN
      run: |
        sudo vpnc-disconnect
        sudo rm /etc/vpnc/lrz.conf
      if: ${{ always() && (steps.vpn-test.outputs.success == 'true') }}
