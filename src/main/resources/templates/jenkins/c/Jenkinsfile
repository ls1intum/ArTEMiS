// ARTEMIS: JenkinsPipeline

pipeline {
        options {
            timeout(time: #jenkinsTimeout, unit: 'MINUTES')
        }
        agent {
            docker {
                image '#dockerImage'
                label 'docker'
            }
        }
        stages {
            stage('Checkout') {
                steps {
                    dir('#testsCheckoutPath') {
                        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '#gitCredentials', name: 'tests', url: '#testRepository']]])
                    }
                    dir('#assignmentCheckoutPath') {
                        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '#gitCredentials', name: 'assignment', url: '#assignmentRepository']]])
                    }
                }
            }
            stage('Build') {
                steps {
                    timestamps {
                        sh '''
                            cd $WORKSPACE
                            echo "--------------------setup-------------------"
                            echo "User:"
                            whoami
                            echo "Updating assignment and test-reports ownership..."
                            sudo chown artemis_user:artemis_user assignment/ -R
                            sudo mkdir test-reports
                            sudo chown artemis_user:artemis_user test-reports/ -R
                            echo "--------------------setup-------------------"
                            echo "--------------------info--------------------"
                            python3 --version
                            pip3 --version
                            gcc --version
                            # Generic debug infos:
                            # tree
                            echo "--------------------info--------------------"
                            echo "--------------------tests-------------------"
                            ls -la tests
                            echo "--------------------tests-------------------"
                            echo "--------------------assignment--------------"
                            ls -la assignment
                            echo "--------------------assignment--------------"

                            cd tests
                            REQ_FILE=requirements.txt
                            if [ -f "$REQ_FILE" ]; then
                                pip3 install --user -r requirements.txt
                            else 
                                echo "$REQ_FILE does not exist"
                            fi
                            exit 0
                           '''
                        sh '''
                            #!/usr/bin/env bash

                            shadowFilePath="../tests/testUtils/c/shadow_exec.c"

                            foundIncludeDirs=`grep -m 1 'INCLUDEDIRS\s*=' assignment/Makefile`
                            echo "Include: $foundIncludeDirs"


                            foundSource=`grep -m 1 'SOURCE\s*=' assignment/Makefile`
                            foundSource="$foundSource $shadowFilePath"
                            echo "Source: $foundSource"

                            rm -f assignment/GNUmakefile
                            rm -f assignment/makefile

                            cp -f tests/Makefile assignment/Makefile || exit 2
                            sed -i "s~\bINCLUDEDIRS\s*=.*~${foundIncludeDirs}~; s~\bSOURCE\s*=.*~${foundSource}~" assignment/Makefile
                           '''
                        sh '''
                            #!/bin/bash

                            # Actual build process:
                            cd tests

                            python3 Tests.py s
                            rm Tests.py
                            rm -rf ./tests

                            exit 0
                           '''
                    }
                }
            }
        }
        post {
            cleanup {
                sh '''
                   sed -i &apos;s/&#x1b;//g&apos; test-reports/tests-results.xml&#xd;
                   sed -i &apos;s/&lt;skipped/&lt;error/g&apos; test-reports/tests-results.xml&#xd;
                   sed -i &apos;s/&lt;\/skipped&gt;/&lt;\/error&gt;/g&apos; test-reports/tests-results.xml&#xd;
                   mv test-reports results
                   '''
                sendTestResults credentialsId: '#jenkinsNotificationToken', notificationUrl: '#notificationsUrl'
                cleanWs()
            }
        }
}
