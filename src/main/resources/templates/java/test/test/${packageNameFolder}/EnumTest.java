package de.tum.in.www1.eist;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

/**
 * @author Kristian Dimo (kristian.dimo@tum.de)
 * @version 1.5 (25.01.2018)
 *
 * This test evaluates if the specified enums in the structure oracle
 * are correctly implemented with the expected names.
 */
@RunWith(Parameterized.class)
public class EnumTest extends StructuralTest {

    public EnumTest(String expectedClassName, String expectedPackageName, JSONObject expectedClassJSON) {
        super(expectedClassName, expectedPackageName, expectedClassJSON);
    }

    /**
     * This method collects the enums in the structure oracle file.
     * These enums are packed into a list, which represents the test data.
     * @return A list of arrays containing each class' name, package and the respective JSON object defined in the structure oracle.
     */
    @Parameterized.Parameters(name = "{0}")
    public static Collection<Object[]> findClasses() {
        List<Object[]> testData = new ArrayList<Object[]>();

        for(int i = 0; i < structureDiffJSON.length(); i++) {
            JSONObject expectedClassJSON = structureDiffJSON.getJSONObject(i);
            JSONObject expectedClassPropertiesJSON = expectedClassJSON.getJSONObject("class");

            // Only test the enums.
            if(expectedClassPropertiesJSON.has("isEnum") && expectedClassPropertiesJSON.has("superclass")) {
                if(expectedClassPropertiesJSON.getBoolean("isEnum") && expectedClassPropertiesJSON.getString("superclass").equals("Enum")) {
                    String expectedClassName = expectedClassPropertiesJSON.getString("name");
                    String expectedClassPackage = expectedClassPropertiesJSON.getString("package");
                    testData.add(new Object[] { expectedClassName, expectedClassPackage, expectedClassJSON });
                }
            }
        }

        return testData;
    }

    /**
     * This test loops over the list of the test data generated by the method findClasses(), checks if each enum is found
     * at all in the assignment and then proceeds to check its values.
     */
    @Test(timeout = 1000)
    public void testEnums() {
        Class<?> observedClass = findClassForTestType("enum");

        if(expectedClassJSON.has("enumValues")) {
            JSONArray expectedEnumValues = expectedClassJSON.getJSONArray("enumValues");

            checkEnumValues(observedClass, expectedEnumValues);
        }
    }

    /**
     * This method checks if the observed enum values match the expected ones defined in the structure oracle.
     * @param observedClass: The enum that needs to be checked as a Class object.
     * @param expectedEnumValues: The information on the expected enum values contained in a JSON array. This information consists
     * of the name of each enum value.
     */
    private void checkEnumValues(Class<?> observedClass, JSONArray expectedEnumValues) {
        Object[] observedEnumValues = observedClass.getEnumConstants();

        assertNotNull("Problem: the enum '" + expectedClassName + "' does not contain any enum constants. Please implement them.", observedEnumValues);

        assertTrue("Problem: the enum '" + expectedClassName + "' does not contain all the expected enum values. Please implement the missing enums.",
            expectedEnumValues.length() == observedEnumValues.length);

        for(int i = 0; i < expectedEnumValues.length(); i++) {
            String expectedEnumValue = expectedEnumValues.getString(i);

            boolean enumValueExists = false;
            for(Object observedEnumValue : observedEnumValues) {

                if(expectedEnumValue.equals(observedEnumValue.toString())) {
                    enumValueExists = true;
                    break;
                }
            }
            if(!enumValueExists) {
                fail("Problem: the class '" + expectedClassName + "' does not include the enum value: " + expectedEnumValue
                    + ". Make sure to implement it as expected.");
            }
        }
    }
}
