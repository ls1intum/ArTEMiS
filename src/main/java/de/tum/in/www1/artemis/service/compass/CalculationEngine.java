package de.tum.in.www1.artemis.service.compass;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonObject;

import de.tum.in.www1.artemis.domain.Feedback;
import de.tum.in.www1.artemis.domain.Result;
import de.tum.in.www1.artemis.service.compass.grade.Grade;

public interface CalculationEngine {

    Map.Entry<Long, Grade> getNextOptimalModel();

    /**
     * Get the assessment result for a model. If no assessment is saved for the given model, it tries to create a new one automatically with the existing information of the engine.
     *
     * @param modelId the id of the model
     * @return the assessment result for the model
     */
    Grade getGradeForModel(long modelId);

    Collection<Long> getModelIds();

    /**
     * Update the engine with a new manual assessment.
     *
     * @param modelingAssessment the new assessment as list of individual Feedback objects
     * @param submissionId       the id of the corresponding model
     */
    void notifyNewAssessment(List<Feedback> modelingAssessment, long submissionId);

    /**
     * Add a new model
     *
     * @param model   the new model as raw sting
     * @param modelId the id of the new model
     */
    void notifyNewModel(String model, long modelId);

    /**
     * @return the time when the engine has been used last
     */
    LocalDateTime getLastUsedAt();

    Map<Long, Grade> getModelsWaitingForAssessment();

    void removeModelWaitingForAssessment(long modelId, boolean isAssessed);

    /**
     * Mark a model as unassessed, i.e. that it (still) needs to be assessed. By that it is not locked anymore and can be returned for assessment by Compass again.
     *
     * @param modelId the id of the model that should be marked as unassessed
     */
    void markModelAsUnassessed(long modelId);

    /**
     * Generate a Feedback list from the given Grade (that was generated by Compass) for the given model.
     *
     * @param grade   the Grade generated by Compass from which the Feedback list should be generated from
     * @param modelId the id of the corresponding model
     * @param result  the corresponding result
     * @return the list of Feedback generated from the Grade
     */
    List<Feedback> convertToFeedback(Grade grade, long modelId, Result result);

    /**
     * @return statistics about the UML model
     */
    JsonObject getStatistics();

}
